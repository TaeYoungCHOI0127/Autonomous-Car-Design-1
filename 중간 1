/////////////////////초음파 센서///////////////////////

#include <NewPing.h>

#define SONAR_NUM 3      // 센서 개수
#define MAX_DISTANCE 150 // 초음파 센서 최대 거리 (cm)
#define WALL_GAP_DISTANCE 400 // 벽과의 최대 거리(mm 단위)
#define WALL_GAP_DISTANCE_HALF 200 // 벽과의 최대 거리 절반(mm 단위)
#define MOTOR_PWM_OFFSET 10 // 모터 속도 조정 오프셋

#define Front 0
#define Left  1 
#define Right 2

// 초음파 센서 핀 번호 정의
#define TRIG1 16 // 초음파 센서 1번 Trig 핀 번호
#define ECHO1 17 // 초음파 센서 1번 Echo 핀 번호
#define TRIG2 18 // 초음파 센서 2번 Trig 핀 번호
#define ECHO2 19 // 초음파 센서 2번 Echo 핀 번호
#define TRIG3 20 // 초음파 센서 3번 Trig 핀 번호
#define ECHO3 21 // 초음파 센서 3번 Echo 핀 번호

// 각 센서에 대한 NewPing 객체 배열 생성
NewPing sonar[SONAR_NUM] = {
  NewPing(TRIG1, ECHO1, MAX_DISTANCE),
  NewPing(TRIG2, ECHO2, MAX_DISTANCE),
  NewPing(TRIG3, ECHO3, MAX_DISTANCE)
};

/////////////////////L298 모터 드라이버//////////////////////////
#define ENA 10 // 모터 A의 Enable 핀
#define IN1 28 // 모터 A의 제어 핀 1
#define IN2 29 // 모터 A의 제어 핀 2
#define IN3 30 // 모터 B의 제어 핀 1
#define IN4 31 // 모터 B의 제어 핀 2
#define ENB 11 // 모터 B의 Enable 핀

// 각 센서의 측정값을 저장할 변수
float front_sonar = 0.0;
float left_sonar  = 0.0;
float right_sonar = 0.0;

/////////////////////미로 상태//////////////////////////
int maze_status = 0; // 미로 상태를 저장할 변수

void setup() 
{
  // 초음파 센서 핀 초기화
  pinMode(TRIG1, OUTPUT);
  pinMode(ECHO1, INPUT);
  pinMode(TRIG2, OUTPUT);
  pinMode(ECHO2, INPUT);
  pinMode(TRIG3, OUTPUT);
  pinMode(ECHO3, INPUT);
  
  // 모터 제어 핀 초기화
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  // 시리얼 통신 시작 (속도: 115200)
  Serial.begin(115200); 
}

// 모터 A 제어 함수
void motor_A_control(int direction_a, int motor_speed_a) 
{
  if (direction_a == HIGH) {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, motor_speed_a); // 모터 A 속도 제어
  } else {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, motor_speed_a);
  }
}

// 모터 B 제어 함수
void motor_B_control(int direction_b, int motor_speed_b) 
{
  if (direction_b == HIGH) {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, motor_speed_b); // 모터 B 속도 제어
  } else {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, motor_speed_b);
  }
}

// 센서 측정값을 기반으로 미로 상태 확인
void check_maze_status(void)
{
  if ((left_sonar >= 0) && (left_sonar <= WALL_GAP_DISTANCE) && 
      (right_sonar >= 0) && (right_sonar <= WALL_GAP_DISTANCE) && 
      (front_sonar >= 0) && (front_sonar <= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 4; // 모든 방향이 막힌 경우
    Serial.println("maze_status = 4");
  } else if ((left_sonar >= 0) && (left_sonar <= WALL_GAP_DISTANCE) && 
             (right_sonar >= 0) && (right_sonar <= WALL_GAP_DISTANCE) && 
             (front_sonar >= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 1; // 앞쪽만 열려있는 경우
    Serial.println("maze_status = 1");
  } else if ((left_sonar >= 0) && (left_sonar <= WALL_GAP_DISTANCE) && 
             (front_sonar >= 0) && (front_sonar <= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 2; // 왼쪽과 앞쪽이 막힌 경우
    Serial.println("maze_status = 2");
  } else if ((right_sonar >= 0) && (right_sonar <= WALL_GAP_DISTANCE) && 
             (front_sonar >= 0) && (front_sonar <= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 3; // 오른쪽과 앞쪽이 막힌 경우
    Serial.println("maze_status = 3");
  } else {
    maze_status = 0; // 장애물이 없는 경우
    Serial.println("maze_status = 0");
  }
}

// 벽 충돌 방지 및 센서 값에 따른 모터 속도 조절 함수
void wall_collision_avoid(int base_speed)
{
  float error = 0.0;
  float Kp = 1.2; // 속도 조절을 위한 비례 상수
  int pwm_control = 0;
  int right_pwm = 0;
  int left_pwm  = 0;
  error = (right_sonar - left_sonar);
  error = Kp * error;  
  
  if (error >= 50) error = 50;
  if (error <= -50) error = -50; 
                       
  right_pwm = base_speed - error;
  left_pwm  = base_speed + error;
  
  if (right_pwm <= 0) right_pwm = 0;
  if (left_pwm  <= 0) left_pwm  = 0;

  if (right_pwm >= 247) right_pwm = 247;
  if (left_pwm  >= 250) left_pwm  = 250;
  
  motor_A_control(HIGH, left_pwm); // 오른쪽 모터 제어
  motor_B_control(HIGH, right_pwm); // 왼쪽 모터 제어
}

void loop() 
{
  // 초음파 센서를 사용하여 거리 측정
  front_sonar = sonar[Front].ping_cm() * 10; // 전방 거리 측정
  left_sonar  = sonar[Left].ping_cm() * 10;  // 좌측 거리 측정
  right_sonar = sonar[Right].ping_cm() * 10; // 우측 거리 측정

  // 센서가 0.0을 반환하는 경우 처리
  if (front_sonar == 0.0) front_sonar = MAX_DISTANCE * 10;
  if (left_sonar  == 0.0) left_sonar = MAX_DISTANCE * 10;
  if (right_sonar == 0.0) right_sonar = MAX_DISTANCE * 10;

  // 시리얼 모니터에 센서 값을 출력
  Serial.print("L: ");
  Serial.print(left_sonar); 
  Serial.print(" ");
  Serial.print("F: "); 
  Serial.print(front_sonar); 
  Serial.print(" ");
  Serial.print("R: "); 
  Serial.println(right_sonar);

  // 센서 값을 기반으로 미로 상태 확인
  check_maze_status();

  // 미로 상태에 따른 동작 실행
  if (maze_status == 4) {
    // 모터 정지
    Serial.println("Rotate CCW");
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    delay(50);

    // 180도 회전
    motor_A_control(HIGH, 220); // 왼쪽 모터 전진
    motor_B_control(LOW, 230);  // 오른쪽 모터 후진
    delay(665);

    // 모터 정지
    Serial.println("Rotate CCW");
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    delay(50);

    // 앞으로 이동
    Serial.println("Go Straight");
    motor_A_control(HIGH, 100);
    motor_B_control(HIGH, 110);
  } else if (maze_status == 1) {
    // 앞으로 이동 및 벽 회피
    Serial.println("run straight");
    wall_collision_avoid(215);
  } else if (maze_status == 3) {
    // 모터 정지
    Serial.println("Rotate CCW");
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    delay(100);

    // 왼쪽으로 90도 회전
    motor_A_control(LOW, 210); 
    motor_B_control(HIGH, 250); 
    delay(300);

    // 모터 정지
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    delay(100);
  } else if (maze_status == 2) {
    // 모터 정지
    Serial.println("Rotate CCW");
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    delay(100);

    // 오른쪽으로 90도 회전
    motor_A_control(HIGH, 210); 
    motor_B_control(LOW, 250); 
    delay(300);

    // 모터 정지
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    delay(100);
  } else {
    // 앞으로 이동
    Serial.println("Go Straight");
    motor_A_control(HIGH, 220);
    motor_B_control(HIGH, 240);
  }
}
